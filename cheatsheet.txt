https://kubernetes.io/docs/reference/kubectl/cheatsheet/
https://kubernetes.io/docs/reference/kubectl/docker-cli-to-kubectl/

Docker
    docker run --name [containerName] [command] -p [hostPort]:[containerPort] [-d] [image:tag] [arguments]
        - run the image 
    docker build -t [image:tag] .
        - build the docker image using Dockerfile 
    docker image ls [-a] [-q]
        - show [all] image [quietly]
    docker ps
        - list all running containers.
    * docker inspect [containerName]
        - metadata about the container
    * docker exec -it [containerName] [command] [bash|sh]
        - open console for running container.
    docker tag [imgName] [newImgName]
        - tagging with new name

    * ENTRYPOINT [exec form] - exec form invoked when the container starts.
    * CMD [args]  - default argument for the executable
    
GCLOUD
    export CLOUDSDK_PYTHON=/usr/bin/python
    
    gcloud container clusters create kubia --num-nodes 3 --machine-type f1-micro
        - create a kube cluster with 3 nodes.
    gcloud container clusters list
        - check kube clusters.
    gcloud config set project [projectName]
        - set default project
    gcloud compute ssh [nodeName]
        - ssh to the node
    gcloud compute instances reset [nodeName]
        - bring the node back.
    gcloud compute firewall-rules create kubia-svc-rule --allow=tcp:30123
        - open firewall on the node
    gcloud compute disks create --size=10GiB --zone=us-central1-c mongodb
        - create GCE persistent disk.

SSL
    openssl genrsa -out https.key 2048
    openssl req -new -x509 -key https.key -out https.cert -days 3650 -subj /CN=www.kubia-example.com
Shortcut

    * edit ~/.bashrc
        => alias k=kubectl
    
    * source <(kubectl completion bash | sed s/kubectl/k/g)
        => bash completion

    * export KUBE_EDITOR="/usr/bin/nano"
        => changing the default editor.
        
    pods=po
    services=svc
    replicationcontroller=rc
    replicaset=rs
    namespace=ns
    ingress=ing
    persistentvolume=pv
    persistentvolumeclaim=pvc
    storageclass=sc
    configmap=cm
    
Kubes
    kubectl config set-context $(kubectl config current-context) --namespace [ns]
        - change the current namespace.
        
    kube get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'
        - get the node's external ip
    kube get po --all-namespaces
        - get all pods in all na
    kube config
        - change the context
    kube cluster-info
        - show cluster info    
    kube get ns
        - get all namespaces
    kube get [resource] [name] -o [yaml|wide] [--show-labels] -L [label_key] -n [namespace]
        - get resource with given format
    kube get [resourceName] -l [key=value]
        - get resource with given label.
        
        'key'
        'key=value'
        'key!=value'
        'key in (value1, value2)'
        'key notin (value1, value2)'
        'key=value,key=value'
    
    kube describe [resource] [name]
        - get resource's detail
    kube run [name] [--image=[imgName]] --port=[portNum] --generator=[apiVerison]
        - deploy rs with cmd
    * kube exec -it [containerName] [bash|sh]
        - run shell on running container
    kube expose [resourceType] [resourceName] --type=LoadBalancer --name [serviceName]
        - deploy LoadBalancer Service for given pod
    kube scale rc [containerName] --replicas=[replicas]
        - horizontally scaling rc
    kube create -f [yamlFile]
        - creating resource from a YAML file.
    kube logs [podName] -c [ctName] [--previous]
        - show last rotation logs
    kube port-forward [podName] [localPort]:[podPort]
        - forwarding local p
    kube edit [resourceType] [resourceName]
        - open the resource's yaml in the text editor to edit the definition.
    kube label [resourceType] [resourceName] [key=value] [--overwrite]
        - add or changing a label.
    kube delete [resourceType] -l [label] [--all]
        - delete the running pod.
    kubectl create cm [cmName] --from-file=[file|directory] --from-literal=[key]=[value]
        - create cm from cmd